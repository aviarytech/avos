---
kind: Template
apiVersion: v1
metadata:
  name: av1
  annotations:
    openshift.io/display-name: AV1 Template
    description: Template for aviary one
    tags: av1
message: |-
  Deployed with the name ${NAME}:
  - web portal (deployment, service, route)
  - av1 agent
  - av1 agent db
  - aca-py agent
  - aca-py db
labels:
  template: av1
objects:
  ## Agent DB
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${NAME}-agent-db"
      labels:
        app: aca-py
        template: aca-py
    spec:
      storageClassName: aws-efs
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${NAME}-agent-db"
      template: aca-py
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      replicas: 1
      test: false
      selector:
        name: "${NAME}-agent-db"
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "true"
          labels:
            app: aca-py
            name: "${NAME}-agent-db"
        spec:
          volumes:
            - name: "${NAME}-agent-db-data"
              persistentVolumeClaim:
                claimName: "${NAME}-agent-db"
          containers:
            - name: "${NAME}-agent-db"
              image: "postgres:latest"
              ports:
                - containerPort: ${{POSTGRES_PORT}}
                  protocol: TCP
              env:
                - name: POSTGRESQL_USER
                  value: ${POSTGRES_USER}
                - name: POSTGRESQL_PASSWORD
                  value: ${POSTGRES_PASSWORD}
                - name: POSTGRESQL_ADMIN_PASSWORD
                  value: ${POSTGRES_ADMIN_PASSWORD}
                - name: POSTGRESQL_DATABASE
                  value: ${POSTGRES_DB_NAME}
                - name: PGCTLTIMEOUT
                  value: "300"
              resources:
                requests:
                  cpu: "10m"
                  memory: "10Mi"
                limits:
                  cpu: "2000m"
                  memory: "6000Mi"
              volumeMounts:
                - name: "${NAME}-agent-db-data"
                  mountPath: "/var/lib/pgsql/data"
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: IfNotPresent
              securityContext:
                capabilities: {}
                privileged: false
              livenessProbe:
                exec:
                  command:
                    - pg_isready
                    - -h
                    - localhost
                    - -U
                    - postgres
                initialDelaySeconds: 30
                timeoutSeconds: 5
                periodSeconds: 20
                failureThreshold: 15
              readinessProbe:
                exec:
                  command:
                    - pg_isready
                    - -h
                    - localhost
                    - -U
                    - postgres
                initialDelaySeconds: 30
                timeoutSeconds: 5
                periodSeconds: 20
                failureThreshold: 15
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${NAME}-agent-db"
            from:
              kind: ImageStreamTag
              namespace: "${IMAGE_NAMESPACE}"
              name: postgres:latest
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${NAME}-agent-db"
      template: aca-py
      labels:
        app: aca-py
    spec:
      selector:
        name: "${NAME}-agent-db"
      ports:
        - protocol: TCP
          name: tcp
          port: ${{POSTGRES_PORT}}
  ## Agent
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${NAME}-agent"
      labels:
        app: aca-py
        template: aca-py
    spec:
      selector:
        name: "${NAME}-agent"
      ports:
        - protocol: TCP
          name: http
          port: ${{HTTP_INTERFACE_PORT}}
          targetPort: ${{HTTP_INTERFACE_PORT}}
        - protocol: TCP
          name: http-admin
          port: ${{ADMIN_INTERFACE_PORT}}
          targetPort: ${{ADMIN_INTERFACE_PORT}}
        - protocol: TCP
          name: websockets
          port: ${{WS_INTERFACE_PORT}}
          targetPort: ${{WS_INTERFACE_PORT}}
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${NAME}-agent"
      labels:
        name: aca-py
        template: aca-py
    spec:
      replicas: 1
      selector:
        name: "${NAME}-agent"
      strategy:
        type: Rolling
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "true"
          name: "${NAME}-agent"
          labels:
            app: aca-py
            name: "${NAME}-agent"
        spec:
          containers:
            - name: "${NAME}-agent"
              command:
                - bash
                - -c
                - $(echo aca-py start
                  --inbound-transport ws '0.0.0.0' ${WS_INTERFACE_PORT}
                  --endpoint ${AGENT_ENDPOINT}
                  --outbound-transport ws
                  --genesis-url "${LEDGER_URL}/genesis"
                  --auto-provision
                  --auto-accept-invites
                  --auto-accept-requests
                  --auto-ping-connection
                  --auto-respond-messages
                  --auto-respond-credential-offer
                  --auto-respond-credential-proposal
                  --auto-store-credential
                  --auto-verify-presentation
                  --wallet-type 'indy'
                  --wallet-name "wallet"
                  --wallet-key "${WALLET_ENCRYPTION_KEY}"
                  --wallet-storage-type "postgres_storage"
                  --wallet-storage-config "$(eval echo \"${WALLET_STORAGE_CONFIGURATION}\")"
                  --wallet-storage-creds "$(eval echo \"${WALLET_STORAGE_CREDENTIALS}\")"
                  --seed "${INDY_WALLET_SEED}"
                  --admin '0.0.0.0' ${ADMIN_INTERFACE_PORT}
                  $([ ! -z "${AGENT_ADMIN_API_KEY}" ] && echo "--admin-api-key ${AGENT_ADMIN_API_KEY}" || echo "--admin-insecure-mode")
                  --label "${NAME}"
                  --log-level "${AGENT_LOG_LEVEL}"
                  --public-invites
                  --connections-invite
                  --invite-metadata-json "{\"group\":\"admin\"}"
                  --invite-label "admin"
                  --monitor-ping
                  ${TIMING:+--timing}
                  ${READ_ONLY_LEDGER:+--read-only-ledger}
                  --plugin indy_catalyst_issuer_registration
                  --plugin acapy_plugin_toolbox
                  ${TRACING:+--trace}
                  ${TRACE_TARGET:+--trace-target ${TRACE_TARGET}}
                  ${TRACE_TAG:+--trace-tag ${TRACE_TAG}}
                  ${TRACE_LABEL:+--trace-label $(eval echo \"${TRACE_LABEL}\")});
              env:
                - name: AGENT_NAME
                  value: ${NAME}
                - name: LEDGER_URL
                  value: http://dev.bcovrin.vonx.io
                - name: POSTGRESQL_WALLET_HOST
                  value: ${NAME}-agent-db
                - name: POSTGRESQL_WALLET_PORT
                  value: ${POSTGRES_PORT}
                - name: WALLET_STORAGE_CONFIGURATION
                  value: '{\"url\":\"${POSTGRESQL_WALLET_HOST}:${POSTGRESQL_WALLET_PORT}\",\"max_connections\":5}'
                - name: WALLET_STORAGE_CREDENTIALS
                  value: '{\"account\":\"${POSTGRESQL_WALLET_USER}\",\"password\":\"${POSTGRESQL_WALLET_PASSWORD}\",\"admin_account\":\"postgres\",\"admin_password\":\"${POSTGRESQL_WALLET_ADMIN_PASSWORD}\"}'
                - name: POSTGRESQL_WALLET_USER
                  value: ${POSTGRES_USER}
                - name: POSTGRESQL_WALLET_PASSWORD
                  value: ${POSTGRES_PASSWORD}
                - name: POSTGRESQL_WALLET_ADMIN_PASSWORD
                  value: ${POSTGRES_ADMIN_PASSWORD}
                - name: WALLET_ENCRYPTION_KEY
                  value: ${WALLET_ENCRYPTION_KEY}
                - name: INDY_WALLET_SEED
                  value: ${INDY_WALLET_SEED}
                - name: WALLET_DID
                  value: ${WALLET_DID}
                - name: WEBHOOK_URL
                  value: http://api.${host}
                - name: HTTP_INTERFACE_PORT
                  value: ${HTTP_INTERFACE_PORT}
                - name: WS_INTERFACE_PORT
                  value: ${WS_INTERFACE_PORT}
                - name: ADMIN_INTERFACE_PORT
                  value: ${ADMIN_INTERFACE_PORT}
                - name: AGENT_ADMIN_API_KEY
                  value: ${AGENT_ADMIN_API_KEY}
                - name: AGENT_ENDPOINT
                  value: ws://agent.${HOST}
                - name: AGENT_ADMIN_ENDPOINT
                  value: http://admin.${HOST}
                - name: AGENT_LOG_LEVEL
                  value: INFO
                - name: TIMING
                  value: ""
                - name: READ_ONLY_LEDGER
                  value: ""
                - name: TRACING
                  value: "True"
                - name: TRACE_TARGET
                  value: ""
                - name: TRACE_TAG
                  value: ""
                - name: TRACE_LABEL
                  value: "'${HOST}'"
              image: "aca-py-agent-toolbox:latest"
              ports:
                - containerPort: ${{HTTP_INTERFACE_PORT}}
                  protocol: TCP
                - containerPort: ${{ADMIN_INTERFACE_PORT}}
                  protocol: TCP
              readinessProbe:
                timeoutSeconds: 30
                initialDelaySeconds: 3
                exec:
                  command:
                    - bash
                    - "-c"
                    - 'curl --fail "http://localhost:${ADMIN_INTERFACE_PORT}/status/ready" -H "X-API-KEY: ${AGENT_ADMIN_API_KEY}"'
              livenessProbe:
                timeoutSeconds: 30
                initialDelaySeconds: 300
                exec:
                  command:
                    - bash
                    - "-c"
                    - 'curl --fail "http://localhost:${ADMIN_INTERFACE_PORT}/status/live" -H "X-API-KEY: ${AGENT_ADMIN_API_KEY}"'
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  cpu: 750m
                  memory: 512Mi
                requests:
                  cpu: 10m
                  memory: 10Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${NAME}-agent"
            from:
              kind: ImageStreamTag
              namespace: "${IMAGE_NAMESPACE}"
              name: aca-py-agent-toolbox:latest
  ## AV1 API DB
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${NAME}-api-db"
      labels:
        app: aca-py
        template: aca-py
    spec:
      storageClassName: aws-efs
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${NAME}-api-db"
      template: aca-py
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      replicas: 1
      test: false
      selector:
        name: "${NAME}-api-db"
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "true"
          labels:
            app: aca-py
            name: "${NAME}-api-db"
        spec:
          volumes:
            - name: "${NAME}-api-db-data"
              persistentVolumeClaim:
                claimName: "${NAME}-api-db"
          containers:
            - name: "${NAME}-api-db"
              image: "mongo:latest"
              ports:
                - containerPort: ${{MONGO_PORT}}
                  protocol: TCP
              env:
                - name: MONGODB_USER
                  value: ${MONGO_USER}
                - name: MONGODB_PASSWORD
                  value: ${MONGO_PASSWORD}
                - name: MONGODB_ADMIN_PASSWORD
                  value: ${MONGO_ADMIN_PASSWORD}
                - name: MONGODB_DATABASE
                  value: ${MONGO_DATABASE}
              resources:
                requests:
                  cpu: "10m"
                  memory: "10Mi"
                limits:
                  cpu: "2000m"
                  memory: "6000Mi"
              volumeMounts:
                - name: "${NAME}-api-db-data"
                  mountPath: "/var/lib/mongodb/data"
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: IfNotPresent
              securityContext:
                capabilities: {}
                privileged: false
              livenessProbe:
                exec:
                  command:
                    - mongo
                    - --eval
                    - db.adminCommand('ping')
                initialDelaySeconds: 30
                timeoutSeconds: 5
                periodSeconds: 20
                failureThreshold: 15
              readinessProbe:
                exec:
                  command:
                    - mongo
                    - --eval
                    - db.adminCommand('ping')
                initialDelaySeconds: 30
                timeoutSeconds: 5
                periodSeconds: 20
                failureThreshold: 15
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${NAME}-api-db"
            from:
              kind: ImageStreamTag
              namespace: "${IMAGE_NAMESPACE}"
              name: mongo:latest
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${NAME}-api-db"
      template: aca-py
      labels:
        app: aca-py
    spec:
      selector:
        name: "${NAME}-api-db"
      ports:
        - protocol: TCP
          name: tcp
          port: ${{MONGO_PORT}}
  ## AV1 API Controller
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${NAME}-av1-api"
      template: aca-py
    spec:
      replicas: 1
      test: false
      selector:
        name: "${NAME}-av1-api"
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "true"
          labels:
            app: aca-py
            name: "${NAME}-av1-api"
        spec:
          containers:
            - name: "${NAME}-av1-api"
              image: "av1-apis:latest"
              ports:
                - containerPort: ${{API_PORT}}
                  protocol: TCP
              env:
                - name: AGENT_URL
                  value: ws://agent.${HOST}
                - name: AGENT_URL
                  value: https://admin-agent.${HOST}
                - name: API_KEY
                  value: ${AGENT_ADMIN_API_KEY}
                - name: DBHOST
                  value: ${NAME}-api-db
                - name: DBUSER
                  value: ${MONGO_USER}
                - name: DBPASSWORD
                  value: ${MONGO_PASSWORD}
                - name: DBNAME
                  value: ${MONGO_DATABASE}
                - name: DBAUTHSOURCE
                  value: ${MONGO_AUTH_SOURCE}
                - name: DBPORT
                  value: ${MONGO_PORT}
                - name: SERVER_PORT
                  value: ${API_PORT}
              resources:
                requests:
                  cpu: "10m"
                  memory: "10Mi"
                limits:
                  cpu: "2000m"
                  memory: "6000Mi"
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: IfNotPresent
              securityContext:
                capabilities: {}
                privileged: false
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${NAME}-av1-api"
            from:
              kind: ImageStreamTag
              namespace: av-images
              name: av1-apis:latest
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${NAME}-av1-api"
      template: aca-py
      labels:
        app: aca-py
    spec:
      selector:
        name: "${NAME}-av1-api"
      ports:
        - protocol: TCP
          name: tcp
          port: ${{API_PORT}}

  # ROUTES
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${NAME}-av1-api"
      template: aca-py
      labels:
        app: aca-py
    spec:
      host: api.${HOST}
      to:
        kind: Service
        name: "${NAME}-av1-api"
      port:
        targetPort: tcp
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${NAME}-agent-http"
      template: aca-py
    spec:
      host: http.${HOST}
      to:
        kind: Service
        name: "${NAME}-agent"
        weight: 100
      port:
        targetPort: http
      wildcardPolicy: None
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${NAME}-admin"
      template: aca-py
    spec:
      host: admin-agent.${HOST}
      to:
        kind: Service
        name: "${NAME}-agent"
      port:
        targetPort: http-admin
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${NAME}-ws"
      template: aca-py
    spec:
      host: agent.${HOST}
      to:
        kind: Service
        name: "${NAME}-agent"
      port:
        targetPort: websockets

parameters:
  - name: NAMESPACE
    value: av1
  - name: WALLET_KEY
    required: true
  - name: NAME
    displayName: Name
    required: true
  - name: HOST
    required: true
  - name: IMAGE_NAMESPACE
    value: av-images
  - name: HTTP_INTERFACE_PORT
    value: "8000"
  - name: ADMIN_INTERFACE_PORT
    value: "8001"
  - name: WEBHOST
  - name: WS_INTERFACE_PORT
    value: "8002"
  - name: WEBHOOK_URL
  - name: WALLET_ENCRYPTION_KEY
    displayName: Wallet Encryption Key
    description: The encryption key to be used for the wallets.  Needs to be basee64 encoded.
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{16}"
  - name: MONGO_PORT
    value: "27017"
  - name: MONGO_USER
    value: "dbUserMongo"
  - name: MONGO_PASSWORD
    displayName: mongo password
    required: true
    value: "monGOD"
    # generate: expression
    # from: "[a-zA-Z0-9]{16}"
  - name: MONGO_AUTH_SOURCE
    displayName: mongo auth source
    required: true
    value: "av1_api"
    # generate: expression
    # from: "[a-zA-Z0-9]{16}"
  - name: MONGO_ADMIN_PASSWORD
    displayName: mongo admin password
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{16}"
  - name: MONGO_DATABASE
    required: true
    value: "av1_api"
  - name: POSTGRES_PORT
    value: "5432"
  - name: POSTGRES_USER
    value: "db_user"
  - name: POSTGRES_PASSWORD
    displayName: postgres password
    required: true
    value: "postgres_password"
    # generate: expression
    # from: "[a-zA-Z0-9]{16}"
  - name: POSTGRES_ADMIN_PASSWORD
    displayName: postgres admin password
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{16}"
  - name: POSTGRES_DB_NAME
    required: true
    value: "av1_unused"
  - name: INDY_WALLET_SEED
    displayName: Indy Wallet Seed
    description: The Seed used for the indy wallet.  Needs to be basee64 encoded.
    required: true
    # generate: expression
    # from: "[a-zA-Z0-9]{32}"
  - name: WALLET_DID
    displayName: Indy Wallet DID
    description: The DID associated to the indy wallet.  Needs to be basee64 encoded.
    required: false
    # generate: expression
    # from: "[a-zA-Z0-9]{16}"
  - name: AGENT_ADMIN_API_KEY
    required: true
    # generate: expression
    # from: "[a-zA-Z0-9]{16}"
    value: "api-key"
  - name: API_PORT
    value: "8080"
